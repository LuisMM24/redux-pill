version: "3.7"
services:
  app:
    build:
      args:
        user: pekechis
        uid: 1000
      context: ./
      dockerfile: Dockerfile
    image: assemblerlaravel8:1.0-php-fpm-80
    container_name: laravelapi_app
    volumes:
      - ./src:/var/www
    networks:
      - app-network
  mysql:
    image: mysql:5.7.33
    container_name: laravelapi_mysql
    restart: unless-stopped
    tty: true
    environment:
      MYSQL_DATABASE: reduxAPI
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_PASSWORD: 123456
      MYSQL_USER: user
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    ports:
      - 3306:3006
    volumes:
      - ./mysql/data:/var/lib/mysql
    networks:
      - app-network
  nginx:
    image: nginx:1.19.8-alpine
    container_name: laravelapi_nginx
    restart: unless-stopped
    tty: true
    ports:
      - 8100:80
    volumes:
      - ./src:/var/www
      - ./nginx/conf:/etc/nginx/conf.d
    networks:
      - app-network
  # phpmyadmin:
  #     image: phpmyadmin:5.1.0-apache
  #     container_name: phpmyadmin
  #     restart: unless-stopped
  #     ports:
  #         - 8200:80
  #     environment:
  #         PMA_HOST: mysql
  #         PMA_PORT: 3306
  #         PMA_USER: laravel8
  #         PMA_PASSWORD: 123456
  #     networks:
  #         - app-network
networks:
  app-network:
    driver: bridge
# version: "2"

# services:
#   mariadb:
#     image: docker.io/bitnami/mariadb:10.6
#     environment:
#       # ALLOW_EMPTY_PASSWORD is recommended only for development.
#       - ALLOW_EMPTY_PASSWORD=yes
#       - MARIADB_USER=user
#       - MARIADB_DATABASE=reduxAPI
#   myapp:
#     image: docker.io/bitnami/laravel:9
#     ports:
#       - "8000:8000"
#     environment:
#       - DB_HOST=mariadb
#       - DB_PORT=3306
#       - DB_USERNAME=user
#       - DB_DATABASE=reduxAPI
#     volumes:
#       - "./src:/app"
#     depends_on:
#       - mariadb

#   nginx:
#     image: nginx:1.19.8-alpine
#     container_name: laravelapi_nginx
#     ports:
#       - 8100:80
#     volumes:
#       - ./src:/var/www
#       - ./nginx/conf:/etc/nginx/conf.d
#     networks:
#       - app-network

# networks:
#   app-network:
#     driver: bridge
